---
title: "Overview of the youdrawitR Package"
title-slide-attributes: 
  data-notes: Hello everyone, my name is Dillon Murphy, and I'm an undergrad student at Cal Poly in San Luis Obispo, California. Today, I am excited to present an overview of the youdrawitR package with my co-presenter Emily. This package serves as a tool for interactive data visualization in R.
subtitle: "Interactive Data Visualization in R"
author: "Dillon Murphy, Cal Poly - San Luis Obispo, CA"
format: revealjs
editor: source
---

# Introduction

```{r setup}
library(youdrawitR)
```

## Google Summer of Code 2023 {background-image="images/GSOCtimeline.png" background-size="100%"}

::: notes
Before diving into the package, I'd like to briefly touch upon my journey with Google Summer of Code this summer.

For those unfamiliar with Google Summer of Code, it is a global program that offers students stipends to write code for open source projects, and aims to bring student developers into the open source community. If you look at the timeline displayed on this slide, it provides a snapshot of how the program is structured.

I had the privilege of developing the youdrawitR package during the Google Summer of Code 2023, under the guidance of my mentors: Emily, Susan, and Heike,

And I highly recommend this opportunity for students passionate about coding and open-source contributions, especially for those who might consider themselves beginner programmers or developers. It's a great program that taught me lots of practical skills and granted me a decent amount of money.
:::

## Overview of the `youdrawitR` Package

`r fontawesome::fa("chart-line")`  Interactive Data Visualization in R

`r fontawesome::fa("user-check")` Engaging users with data

<img src="images/drawr-example-1.gif" style="display: block; margin: auto;"/>

::: notes
Alright, now let's get into the primary focus of the presentation, the `youdrawitR` package.

As the name suggests, the primary feature of this package is its interactive nature. `youdrawitR` presents a method for users to actively engage with data. Instead of merely observing static graphs, users can draw and make their own interpretations.

Take a look at the gif on the screen, you'll see an example in action. The user begins by drawing a boundary for the confidence region and then sketches their guess for the line of best fit. After completion of the guess, the real confidence region and line of best fit is overlayed, which allows for a direct comparison. This hands-on approach encourages active participation in data analysis, and allows us to see how our intuitive perceptions align with actual data trends.
:::

## Background for Measuring Trends

-   Fitting Trends by Eye -- maneuvering a string, black thread, or ruler.

::: columns
::: column
-   [New York Times 'You Draw It' feature](https://www.nytimes.com/interactive/2015/05/28/upshot/you-draw-it-how-family-income-affects-childrens-college-chances.html) (Aisch, Cox, and Quealy, 2015)
-   ['You Draw It': Implementation of Visually Fitted Trends with `r2d3`](https://jds-online.org/journal/JDS/article/1317/info)
-   [Eye Fitting Straight Lines in the Modern Era](https://www.tandfonline.com/doi/abs/10.1080/10618600.2022.2140668?journalCode=ucgs20)
:::

::: column
![](images/nyt-caraccidents.png)
:::
:::

## Motivations Behind Creating the Package

D3 is not intuitive for us R users `r fontawesome::fa("computer")` `r fontawesome::fa("keyboard")`

```{r}
#| fig-align: center
knitr::include_graphics("images/code-sketch.png")
```

Add additional functionality for broader use

# Getting Started with youdrawitR

## Using `youdrawitR`

-   Install: `devtools::install_github("earobinson95/youdrawitR")`

-   Load: `library(youdrawitR)`

-   Data generation: `customDataGen()` and `linearDataGen()`

-   Visualization: `drawr()`

    ![](images/youdrawit_flowchart.png)

Package website:<https://earobinson95.github.io/youdrawitR/>

## Data Generation with `youdrawitR`

::: columns
-   Using `customDataGen` and `linearDataGen` for data preparation.

::: {.column width="50%"}
```{r echo=TRUE}
# Example of using customDataGen
custom_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "linear",
  conf_int = TRUE
)
```
:::

::: {.column width="50%"}
```{r echo = TRUE}
# Example of using linearDataGen
linear_data <- linearDataGen(
  N = 20,
  slope = 1.5,
  y_int = 0,
  sigma = 2,
  x_min = 0,
  x_max = 20,
  conf_int = TRUE
)
```
:::
:::

# Visualization with youdrawitR

## Visualizing with `drawr`

::: columns
::: {.column width="35%"}
-   Renders interactive plots
-   Users can draw predictions
-   Customization options
:::

::: {.column width="65%"}
```{r echo=TRUE}
# Example using previously generated custom_data
drawr(custom_data, 
      title = "Horsepower vs Miles per Gallon", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      conf_int = TRUE)
```
:::
:::

##  {auto-animate="true"}

::: columns
::: {.column style="max-width: min-content; white-space: nowrap;"}
**More Examples:**
:::

::: {.column style="flex: 1; text-align: left;"}
**Logistic Regression**
:::
:::

::: panel-tabset
### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")

```

### Plot

```{r}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")
```
:::

##  {auto-animate="true"}

::: columns
::: {.column style="max-width: min-content; white-space: nowrap;"}
**More Examples:**
:::

::: {.column style="flex: 1; text-align: left; white-space: nowrap;"}
**Polynomial Regression & Customized Plot**
:::
:::

::: panel-tabset
### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with polynomial regression of degree 2
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE,
      aspect_ratio = 1.5)
```

### Plot

```{r}
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE,
      aspect_ratio = 1.5)
```
:::

##  {auto-animate="true"}

::: columns
::: {.column style="max-width: min-content; white-space: nowrap;"}
**More Examples:**
:::

::: {.column style="flex: 1; text-align: left;"}
**Loess Regression**
:::
:::

::: panel-tabset
### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```

### Plot

```{r}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```
:::

## Your Turn 1

<!-- Let user install and use package -->

Using the documentation `help(drawr)`, change xxxx

<!-- Questions about what worked -->

## Embedding `youdrawitR` into HTML

::: columns
::: {.column width="50%"}
-   Quarto

```{r echo=TRUE}
# Render with quarto/Rmarkdown  
## For quarto: use quarto >= 1.3.450 or knitr <1.43
drawr(linear_data)
```
:::

::: {.column width="50%"}
-   Direct Save as HTML

```{r echo=TRUE, eval = FALSE}
# Save into an html
drawr(linear_data, 
      save_html_file_path = "myViz.html")

## Embedded HTML below
```

<iframe src="images/myViz.html" width="100%" height="400px">

</iframe>
:::
:::

## Integrating Into Shiny

-   Displaying Visualizations

```{r echo=TRUE, eval = FALSE}
# ui 
r2d3::d3Output("shinydrawr", height = "500px", width = "800px")

# server
output$shinydrawr <- r2d3::renderD3({ drawr(data, hide_buttons = T )})
```

-   Retrieving Drawn Data

```{r echo=TRUE, eval = FALSE}
# Drawn data is sent to shiny from the js file upon completion of the original line.

# Fetch the original line data
jsonlite::fromJSON(input$completedLineData)

# Fetch any additional lines drawn
jsonlite::fromJSON(input$newLineData)
```

## Shiny App & `youdrawitR`

-   Real-time interaction with 'Can You Draw It?' app
-   Change data sources: Input, Simulate, or Use R Dataset
-   Drawing, saving, and resetting functionalities
-   Customization: Color changes, tooltips, confidence intervals.
-   Saving users drawn lines.

Shiny App:<https://dillonmurphy.shinyapps.io/youdrawit/>

## Try For Yourself

<iframe width="100%" height="100%" src="https://dillonmurphy.shinyapps.io/youdrawit/">

</iframe>

## Drawing Cat Competition

# Importance & Uses of `youdrawitR`

## Potential Applications

-   Engaging educational tool.
-   Personal data visualization projects.
-   Encouraging active participation in data interpretation.
-   Testing graphics for perception.

## Future Directions for `youdrawitR`

-   Continuous development.
-   Potential enhancements based on feedback.
-   Expansion of features and functionalities.
