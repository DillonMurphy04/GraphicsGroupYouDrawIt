---
title: "Overview of the youdrawitR Package"
subtitle: "Interactive Data Visualization in R"
author: "Dillon Murphy"
format: revealjs
editor: visual
---

# Introduction

```{r setup}
library(youdrawitR)
```

## **Google Summer of Code 2023**

![](figures/GSOCtimeline.png)

## Overview of the `youdrawitR` Package

-   Interactive Data Visualization in R
-   Engaging users with data

<!-- Include Output -->

## Motivations Behind Creating the Package

-   Engaging users with data
-   Enhancing data literacy
-   Bridging the gap between data and interpretation

# Getting Started with youdrawitR

## Using `youdrawitR`

-   Install: `devtools::install_github("earobinson95/youdrawitR")`

-   Load: `library(youdrawitR)`

-   Data generation: `customDataGen()` and `linearDataGen()`

-   Visualization: `drawr()`

    ![](figures/youdrawit_flowchart.png)

## Data Generation with `youdrawitR`

::: columns
-   Using `customDataGen` and `linearDataGen` for data preparation.

::: {.column width="50%"}
```{r echo=TRUE}
# Example of using customDataGen
custom_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "linear",
  conf_int = TRUE
)
```
:::

::: {.column width="50%"}
```{r echo = TRUE}
# Example of using linearDataGen
linear_data <- linearDataGen(
  N = 20,
  slope = 1.5,
  y_int = 0,
  sigma = 2,
  x_min = 0,
  x_max = 20,
  conf_int = TRUE
)
```
:::
:::

# Visualization with youdrawitR

## Visualizing with `drawr`

::: columns
::: {.column width="35%"}
-   Renders interactive plots
-   Users can draw predictions
-   Customization options
:::

::: {.column width="65%"}
```{r echo=TRUE}
# Example using previously generated custom_data
drawr(custom_data, 
      title = "Horsepower vs Miles per Gallon", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      conf_int = TRUE)
```
:::
:::

## More Examples {.scrollable}

::: {.panel-tabset}

### Logistic

::: {.panel-tabset}

### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")

```

### Plot

```{r}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")
```

:::

### Polynomial & Customized

::: {.panel-tabset}

### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with polynomial regression of degree 2
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE,
      aspect_ratio = 1.5)
```

### Plot

```{r}
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE,
      aspect_ratio = 1.5)
```

:::

### Loess

::: {.panel-tabset}

### Code

```{r echo=TRUE, eval = FALSE}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```

### Plot

```{r}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```

:::

:::

## Your Turn

<!-- Let user install and use package -->

<!-- Questions about what worked -->

## Embedding `youdrawitR` into HTML

::: columns
::: {.column width="50%"}
-   Quarto

```{r echo=TRUE}
# Render with quarto/Rmarkdown  
## For quarto: use quarto >= 1.3.450 or knitr <1.43
drawr(linear_data)
```
:::

::: {.column width="50%"}
-   Direct Save as HTML

```{r echo=TRUE, eval = FALSE}
# Save into an html
drawr(linear_data, 
      save_html_file_path = "myViz.html")

## Embedded HTML below
```

<iframe src="figures/myViz.html" width="100%" height="400px">

</iframe>
:::
:::

## Integrating Into Shiny

-   Displaying Visualizations

```{r echo=TRUE, eval = FALSE}
# ui 
r2d3::d3Output("shinydrawr", height = "500px", width = "800px")

# server
output$shinydrawr <- r2d3::renderD3({ drawr(data, hide_buttons = T })
```

-   Retrieving Drawn Data

```{r echo=TRUE, eval = FALSE}
# Drawn data is sent to shiny from the js file upon completion of the original line.

# Fetch the original line data
jsonlite::fromJSON(input$completedLineData)

# Fetch any additional lines drawn
jsonlite::fromJSON(input$newLineData)
```

## Shiny App & `youdrawitR`

-   Real-time interaction with 'Can You Draw It?' app
-   Change data sources: Input, Simulate, or Use R Dataset
-   Drawing, saving, and resetting functionalities
-   Customization: Color changes, tooltips, confidence intervals.

## Try For Yourself

<iframe width = "100%" height = "100%" src="https://dillonmurphy.shinyapps.io/youdrawit/"></iframe>

## Drawing Cat Competition

# Importance & Uses of `youdrawitR`

## Potential Applications

-   Engaging educational tool.
-   Personal data visualization projects.
-   Encouraging active participation in data interpretation.

## Future Directions for `youdrawitR`

-   Continuous development.
-   Potential enhancements based on feedback.
-   Expansion of features and functionalities.
