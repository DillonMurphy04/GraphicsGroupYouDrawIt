---
title: "Overview of the youdrawitR Package"
subtitle: "Interactive Data Visualization in R"
author: "Dillon Murphy, Cal Poly - San Luis Obispo, CA"
format: revealjs
editor: source
---

# Introduction

```{r setup}
library(youdrawitR)
```

## GSOC Introduction

<!-- Introduction, Application process, timeline, my project -->

## Overview of the `youdrawitR` Package

-   Interactive Data Visualization in R
-   Engaging users with data

<!-- Include Output or Gif -->

## Background for Measuring Trends


-   Fitting Trends by Eye -- maneuvering a string, black thread, or ruler.

:::: columns
::: column
-   [New York Times 'You Draw It' feature](https://www.nytimes.com/interactive/2015/05/28/upshot/you-draw-it-how-family-income-affects-childrens-college-chances.html) (Aisch, Cox, and Quealy, 2015)
-   ['You Draw It': Implementation of Visually Fitted Trends with `r2d3`](https://jds-online.org/journal/JDS/article/1317/info)
-   [Eye Fitting Straight Lines in the Modern Era](https://www.tandfonline.com/doi/abs/10.1080/10618600.2022.2140668?journalCode=ucgs20)
:::
::: column

![](images/nyt-caraccidents.png)

:::
::::


## Motivations Behind Creating the Package

D3 is not intuitive for us R users `r fontawesome::fa("computer")` `r fontawesome::fa("keyboard")`

```{r}
#| fig-align: center
knitr::include_graphics("images/code-sketch.png")
```


Add additional functionality for broader use

# Getting Started with youdrawitR

## Setting Up and Preparing Data with `youdrawitR`

-   Installation and loading:
    -   Install: `devtools::install_github("earobinson95/youdrawitR")`
    -   Load: `library(youdrawitR)`
-   Data generation: `customDataGen` and `linearDataGen`

<!-- drawr function for data visualization -->

## Data Generation with `youdrawitR`

::: columns
-   Using `customDataGen` and `linearDataGen` for data preparation.

::: {.column width="50%"}
```{r echo=TRUE}
# Example of using customDataGen
custom_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "linear",
  conf_int = TRUE
)
```
:::

::: {.column width="50%"}
```{r echo = TRUE}
# Example of using linearDataGen
linear_data <- linearDataGen(
  N = 20,
  slope = 1.5,
  y_int = 0,
  sigma = 2,
  x_min = 0,
  x_max = 20,
  conf_int = TRUE
)
```
:::
:::

# Visualization with youdrawitR

## Visualizing with `drawr`

::: columns
::: {.column width="35%"}
-   Renders interactive plots
-   Users can draw predictions
-   Customization options
:::

::: {.column width="65%"}
```{r echo=TRUE}
# Example using previously generated custom_data
drawr(custom_data, 
      title = "Horsepower vs Miles per Gallon", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      conf_int = TRUE)
```
:::
:::

## More Examples

<!-- Maybe consider putting each of these examples on their own slide for more space? -->

<details>

<summary>Logistic Regression</summary>

::: columns
::: {.column width="50%"}
```{r echo=TRUE, eval = FALSE}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")

```
:::

::: {.column width="50%"}
```{r}
# Generating data with logistic regression
# For this example, we'll need a binary response variable. 
# Let's create a binary variable based on horsepower.
mtcars$high_hp <- ifelse(mtcars$hp > 120, 1, 0)

logistic_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "high_hp",
  regression_type = "logistic"
)

drawr(logistic_data, 
      title = "Probability High Horsepower vs MPG (Logistic)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "High Horsepower (1 = Yes, 0 = No)")
```
:::
:::

</details>

<details>

<summary>Polynomial Regression with Customized Output</summary>

::: columns
::: {.column width="50%"}
```{r echo=TRUE, eval = FALSE}
# Generating data with polynomial regression of degree 2
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE)
```
:::

::: {.column width="50%"}
```{r}
poly_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "polynomial",
  degree = 2
)

# Customized drawr output
drawr(poly_data, 
      title = "Horsepower vs Miles per Gallon (Polynomial)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower",
      drawn_line_color = "red",
      true_line_color = "rgba(0,255,0,.8)",
      draw_region_color = "#FFFFFF",
      show_tooltip = TRUE)
```
:::
:::

</details>

<details>

<summary>Loess Regression</summary>

::: columns
::: {.column width="50%"}
```{r echo=TRUE, eval = FALSE}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```
:::

::: {.column width="50%"}
```{r}
# Generating data with loess regression
loess_data <- customDataGen(
  df = mtcars,
  xvar = "mpg",
  yvar = "hp",
  regression_type = "loess",
  span = 0.75
)

drawr(loess_data, 
      title = "Horsepower vs Miles per Gallon (Loess)", 
      subtitle = "For mtcars dataset",
      x_lab = "Miles per Gallon",
      y_lab = "Horsepower")
```
:::
:::

</details>

## Your Turn 1

<!-- Let user install and use package -->

Using the documentation `help(drawr)`, change xxxx

<!-- Questions about what worked -->

## Integrating Into HTML

<!-- Quarto, Shiny App, Save to Html Option -->

## Shiny App & `youdrawitR`

-   Real-time interaction with 'Can You Draw It?' app
-   Change data sources: Input, Simulate, or Use R Dataset
-   Drawing, saving, and resetting functionalities
-   Customization: Color changes, tooltips, confidence intervals.
-   Saving users drawn lines.

<!-- Let Them Try Shiny App -->

## Your Turn 2

<!-- Mention Inner Workings (Try it yourself) -->

<!-- Feedback -->

## Drawing Cat Competition

# Importance & Uses of `youdrawitR`

## Potential Applications

-   Engaging educational tool.
-   Personal data visualization projects.
-   Encouraging active participation in data interpretation.
-   Testing graphics for perception.

## Future Directions for `youdrawitR`

-   Continuous development.
-   Potential enhancements based on feedback.
-   Expansion of features and functionalities.
